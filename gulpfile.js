import gulp from 'gulp';
import browserSync from 'browser-sync';
import dartSass from 'sass';
import gulpSass from 'gulp-sass';
const sass = gulpSass(dartSass);
import cleanCSS from 'gulp-clean-css';
import autoprefixer from 'gulp-autoprefixer';
import rename from 'gulp-rename';
import uglify from 'gulp-uglify';
import imagemin from 'gulp-imagemin';
import htmlMinify from 'html-minifier';
import webserver from 'gulp-webserver';

gulp.task('server', function() {
    gulp.src('dist')
      .pipe(webserver({
        open: true,
        livereload: true,
        fallback: 'index.html'
      }));
});

gulp.task('compress-js', function () {
  return gulp.src('src/js/**/*.js')
        // .pipe(uglify())
        .pipe(gulp.dest('dist/js'));
});

gulp.task('compress-img', function () {
    return gulp.src('src/img/**/*')
          .pipe(imagemin())
          .pipe(gulp.dest('dist/img'));
});

const options = {
    includeAutoGeneratedTags: true,
    removeAttributeQuotes: true,
    removeComments: true,
    removeRedundantAttributes: true,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
    sortClassName: true,
    useShortDoctype: true,
    collapseWhitespace: true
};
  
gulp.task('compress-pages', function () {
    return gulp.src('src/**/*.html')
        .on('data', function(file) {
        const buferFile = Buffer.from(htmlMinify.minify(file.contents.toString(), options))
        return file.contents = buferFile
        })
        .pipe(gulp.dest('dist'))
})

gulp.task('styles', function() {
    return gulp.src("./src/sass/**/*.+(scss|sass)")
        .pipe(sass({outputStyle: 'compressed'}).on('error', sass.logError))
        .pipe(rename({suffix: '.min', prefix: ''}))
        .pipe(autoprefixer())
        .pipe(cleanCSS({compatibility: 'ie8'}))
        .pipe(gulp.dest("dist/css"))
        .pipe(browserSync.stream());
});

gulp.task('browser-sync', (done) => {
    browserSync.init({
        server: {
            baseDir: './dist'
        }
    });
    done();
});

function reload(done) {
    browserSync.reload();
    done();
}

gulp.task('watch', function() {
    gulp.watch("./src/sass/**/*", gulp.series('styles', reload));
    gulp.watch("./src/js/**/*.js", gulp.series('compress-js', reload));
    gulp.watch("./src/**/*.html", gulp.series('compress-pages', reload));
})

gulp.task('favicon', () => {
    return gulp.src('src/favicon/*')
        .pipe(gulp.dest('dist/favicon'));
});

gulp.task('fonts', () => {
    return gulp.src('src/fonts/*')
        .pipe(gulp.dest('dist/fonts'));
});

gulp.task('default', gulp.parallel('watch', 'server', 'styles', 'compress-js', 'compress-img', 'compress-pages', 'favicon', 'fonts'));